// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  GoString HelloWorld() {
    return _HelloWorld();
  }

  late final _HelloWorldPtr =
      _lookup<ffi.NativeFunction<GoString Function()>>('HelloWorld');
  late final _HelloWorld = _HelloWorldPtr.asFunction<GoString Function()>();

  int Devide(
    int a,
    int b,
  ) {
    return _Devide(
      a,
      b,
    );
  }

  late final _DevidePtr =
      _lookup<ffi.NativeFunction<GoInt Function(GoInt, GoInt)>>('Devide');
  late final _Devide = _DevidePtr.asFunction<int Function(int, int)>();

  int Multiply(
    int a,
    int b,
  ) {
    return _Multiply(
      a,
      b,
    );
  }

  late final _MultiplyPtr =
      _lookup<ffi.NativeFunction<GoInt Function(GoInt, GoInt)>>('Multiply');
  late final _Multiply = _MultiplyPtr.asFunction<int Function(int, int)>();
}

class max_align_t extends ffi.Opaque {}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Int64;

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.Int64;
typedef GoString = _GoString_;

const int NULL = 0;
