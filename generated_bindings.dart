// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  GoString helloWorld() {
    return _helloWorld();
  }

  late final _helloWorldPtr =
      _lookup<ffi.NativeFunction<GoString Function()>>('helloWorld');
  late final _helloWorld = _helloWorldPtr.asFunction<GoString Function()>();

  int getUid() {
    return _getUid();
  }

  late final _getUidPtr =
      _lookup<ffi.NativeFunction<GoInt Function()>>('getUid');
  late final _getUid = _getUidPtr.asFunction<int Function()>();

  GoString decode(
    GoString path,
  ) {
    return _decode(
      path,
    );
  }

  late final _decodePtr =
      _lookup<ffi.NativeFunction<GoString Function(GoString)>>('decode');
  late final _decode = _decodePtr.asFunction<GoString Function(GoString)>();
}

class max_align_t extends ffi.Opaque {}

class _GoString_ extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p;

  @ptrdiff_t()
  external int n;
}

typedef ptrdiff_t = ffi.Int64;

class GoInterface extends ffi.Struct {
  external ffi.Pointer<ffi.Void> t;

  external ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @GoInt()
  external int len;

  @GoInt()
  external int cap;
}

typedef GoInt = GoInt64;
typedef GoInt64 = ffi.Int64;
typedef GoString = _GoString_;

const int NULL = 0;
